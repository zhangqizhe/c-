#include<iostream>
using namespace std;

/*
红黑树:
不是一课平衡树，节点的左右子树高度，长的不超过短的二倍
特点:
1.树的每一个节点都有颜色
2.null是黑色 
3.root是黑色
4.不能出现连续的红色节点
5.从root根节点到每一个叶子节点的路劲上，黑色节点的数量是相同的

操作						AVL			红黑树
平衡树						是			  否
增删查时间复杂度			O(logn)		 O(logn)
Insert最多旋转次数			2			   2	
remove最多旋转次数			O(logn)		   3

差别: 如果插入、查询选AVL
		  插入、查询、删除 红黑树

红黑树的五个性质：
1.每一个节点都是有颜色的，不是黑色，就是红色
2.nullptr是黑色
3.root根节点必须是黑色
4.不能出现连续的红色节点	父亲红色，孩子就一定都是黑色；
							如果孩子有红色节点，父亲肯定是黑色
5.从根节点开始，到任意一个叶子节点的路径上，黑色节点的数量是一致的


插入操作:
1.空树 -》 插入成为根节点	节点:黑色
2.非空  插入节点 成为叶子节点   节点:红色
	！！！检查父节点颜色，如果父节点是黑色，插入完成
	否则出现连续的红色节点，开始做红黑树的插入调整操作：



*/

int main()
{

	return 0;
}